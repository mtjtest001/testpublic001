name: Terragrunt Plan and Apply
on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: "Environment"
        required: true
    secrets:
      app_id_01:
        required: true
      app_key_01:
        required: true

defaults:
  run:
    shell: bash

jobs:
  terragrunt-plan:
    name: "Terragrunt Plan"
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    env:
      # ARM_USE_OIDC: true
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: Git Config
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE

      - name: Checkout
        uses: actions/checkout@v4

      - name: Terragrunt installer
        uses: autero1/action-terragrunt@v3.0.2
        with:
          terragrunt-version: v0.67.6

      # - name: Wiz Scan
      #   uses: mtjtest001/testpublic001/.github/actions/wiz@main
      #   with:
      #     environment: ${{ inputs.environment }}
      #     secrets: inherit
      #     WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
      #     WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}

      - name: Prerequisites
        uses: mtjtest001/testpublic001/.github/actions/terraform-prerequisites@main
        with:
          environment: ${{ inputs.environment }}
          secrets: inherit
          app-id: ${{ secrets.app_id_01 }}
          private-key: ${{ secrets.app_key_01 }}

      - name: Login to Azure CLI
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          az login --service-principal -u $ARM_CLIENT_ID -p $ARM_CLIENT_SECRET --tenant $ARM_TENANT_ID
          az account set --subscription $ARM_SUBSCRIPTION_ID

      # - uses: azure/login@v2
      #   with:
      #     creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          
      # - name: TerragruntPlan
      #   uses: mtjtest001/testpublic001/.github/actions/terragrunt-plan@main
      #   with:
      #     environment: ${{ inputs.environment }}
      #     app-id: ${{ secrets.app_id_01 }}
      #     private-key: ${{ secrets.app_key_01 }}
      #     secrets: inherit

      - name: "Terragrunt Init, Validate"
        shell: bash
        working-directory: "./${{ inputs.environment }}"
        env:
          TERRAGRUNT_NON_INTERACTIVE: true
        run: |
          set -xeuo pipefail
          terragrunt init
          terragrunt run-all validate --terragrunt-ignore-dependency-errors

      - name: "Terragrunt Plan"
        shell: bash
        working-directory: "./${{ inputs.environment }}"
        env:
          TERRAGRUNT_NON_INTERACTIVE: true
        run: |
          set -xeuo pipefail

          terragrunt run-all plan -no-color -input=false -out tfplan --terragrunt-ignore-dependency-errors
          
          echo "####### Plan Output #######"
          exec > >(tee -a "${GITHUB_WORKSPACE}/plan_output.txt") 2>&1 terragrunt run-all show -no-color tfplan --terragrunt-ignore-dependency-errors --terragrunt-parallelism 1

      - name: Format output file
        shell: bash
        run: |
          set -xeuo pipefail

          echo "Formatting output file from ${{ matrix.directory }}"

          mv "${GITHUB_WORKSPACE}/plan_output.txt" "${GITHUB_WORKSPACE}/plan_output.txt.orig"

          echo 'Ran Plan for dir: `${{ matrix.directory }}`' >> "${GITHUB_WORKSPACE}/plan_output.txt"
          echo >> "${GITHUB_WORKSPACE}/plan_output.txt"
          echo '<details><summary>Show Output </summary>' >> "${GITHUB_WORKSPACE}/plan_output.txt"
          echo >> "${GITHUB_WORKSPACE}/plan_output.txt"
          echo '```diff' >> "${GITHUB_WORKSPACE}/plan_output.txt"
          echo >> "${GITHUB_WORKSPACE}/plan_output.txt"
          cat "${GITHUB_WORKSPACE}/plan_output.txt.orig" >> "${GITHUB_WORKSPACE}/plan_output.txt"
          echo >> "${GITHUB_WORKSPACE}/plan_output.txt"
          echo '```' >> "${GITHUB_WORKSPACE}/plan_output.txt"

          echo "plan_report_file_path=${GITHUB_WORKSPACE}/plan_output.txt" >> $GITHUB_ENV

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.app-id }}
          private-key: ${{ secrets.private-key }}

      - name: Create PR Comment with Plan Results
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.generate-token.outputs.token }}
          script: |
            const issue_number = context.issue.number;
            const planResultPath = process.env.plan_report_file_path;
            const fs = require('fs');
            const planResult = fs.readFileSync(planResultPath, 'utf8');

            github.rest.issues.createComment({
              issue_number: issue_number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: planResult
            });


  terragrunt_apply:
    name: "Terragrunt Apply"
    if: needs.terragrunt-plan.result == 'success'
    needs: terragrunt-plan
    runs-on: ubuntu-latest
    env:
      # ARM_USE_OIDC: true
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    environment: ${{ inputs.environment }}_deploy

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Terragrunt installer
        uses: autero1/action-terragrunt@v3.0.2
        with:
          terragrunt-version: v0.67.6

      - name: TerragruntApply
        uses: mtjtest001/testpublic001/.github/actions/terragrunt-apply@main
        with:
          environment: ${{ inputs.environment }}
          secrets: inherit
